import numpy as np

q_init = np.array([ 0.        ,  0.        ,  1.07      ,  0.        ,  0.        ,
        0.        ,  1.        ,  0.        ,  0.        , -0.6       ,
        1.        , -0.5       ,  0.        ,  0.        ,  0.        ,
        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
        0.        ,  0.        , -0.6       ,  1.        , -0.5       ,
        0.        ,  0.78529246, -0.51232104,  1.91984857, -1.72948212,
       -0.62940512, -0.35080876, -0.21707402])

q_goal = np.array([ 0.        ,  0.        ,  1.07      ,  0.        ,  0.        ,
        0.        ,  1.        ,  0.        ,  0.        , -0.6       ,
        1.        , -0.5       ,  0.        ,  0.        ,  0.        ,
        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
        0.        ,  0.        , -0.6       ,  1.        , -0.5       ,
        0.        , -0.78977453,  0.01748092,  1.40032744, -0.94566968,
       -1.23250943,  0.14937557, -0.35144354])

# q0Complete = np.array([ 0.   ,  0.   ,  1.07,  0.   ,  0.   ,  0.   ,  1.   ,
#                        0.   ,  0.   , -0.49 ,  0.89 , -0.4  ,  0.   ,
#         0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  
#                        0.   ,  0.   , -0.49 ,  0.89 , -0.4  ,  0.   ,
#         0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ])

q0Complete = np.array([ 0.   ,  0.   ,  1.07,  0.   ,  0.   ,  0.   ,  1.   ,
                       0.   ,  0.   , -0.6       ,  1.        , -0.5  ,  0.   ,
        0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  
                       0.   ,  0.   , -0.6       ,  1.        , -0.5  ,  0.   ,
        0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ])

q0CompleteCabinet = np.array([ 0.        ,  0.        ,  1.07      ,  0.        ,  0.        ,        0.        ,  1.   ,
                              0.   ,  0.   ,-0.6       ,  1.        , -0.5   ,  0.   ,
        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,0.        ,0.        ,
                              0.   ,  0.   , -0.6       ,  1.        , -0.5  ,  0.   ,
        0.56498431, -0.2334226 , 1.47737752, -1.79750219, -2.25695852,  0.0338345 , -0.34384566])

q0CompleteDrawer = np.array([ 0.        ,  0.        ,  1.07      ,  0.        ,  0.        ,        0.        ,  1.             ,
                             0.   ,  0.   , -0.6       ,  1.        , -0.5  ,  0.   ,
        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,0.        ,0.        ,
                             0.   ,  0.   ,-0.6       ,  1.        , -0.5  ,  0.   ,
      -0.4790641045716651, -1.3881486978589226, 0.3399735144695531, -1.7885660511600359, -1.1509037410660294, 0.2130497724658741, -0.2773730378742899])

joint_indices_leg = [53, 54, 55, 57, 58, 59, #left leg
                    44, 45, 46, 48, 49, 50]#right_leg

joint_config_leg = [0.   ,  0.   , -0.49 ,  0.89 , -0.4  ,  0.   ]*2

# q0Complete = np.array([ 0.   ,  0.   ,  1.086,  0.   ,  0.   ,  0.   ,  1.   ,  0.   ,
#         0.   ,  0.   ,  0.   , -0.49 ,  0.89 , -0.4  ,  0.   ,  0.   ,
#         0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,
#         0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,
#         0.   ,  0.   , -0.49 ,  0.89 , -0.4  ,  0.   ,  0.   ,  0.   ,
#         0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,
#         0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ])

# q0Complete = np.array([ 0.   ,  0.   ,  1.07,  0.   ,  0.   ,  0.   ,  1.   ,  0.   ,
#         0.   ,  0.   ,  0.   , -0.6       ,  1.        , -0.5   ,  0.   ,  0.   ,
#         0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,
#         0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,
#         0.   ,  0.   , -0.6       ,
#         1.        , -0.5     ,  0.   ,  0.   ,  0.   ,
#         0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,
#         0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ])


# q0CompleteCabinet = np.array([ 0.        ,  0.        ,  1.07      ,  0.        ,  0.        ,
#         0.        ,  1.        ,  0.        ,  0.        ,  0.        ,
#         0.        , -0.6       ,  1.        , -0.5       ,  0.        ,
#         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
#         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
#         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
#         0.        ,  0.        ,  0.        ,  0.        , -0.6       ,
#         1.        , -0.5       ,  0.        ,  0.56498431, -0.2334226 ,
#         1.47737752, -1.79750219, -2.25695852,  0.0338345 , -0.34384566,
#         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
#         0.        ,  0.        ,  0.        ,  0.        ,  0.        ])

# q0CompleteDrawer = np.array([ 0.        ,  0.        ,  1.07      ,  0.        ,  0.        ,
#         0.        ,  1.        ,  0.        ,  0.        ,  0.        ,
#         0.        , -0.6       ,  1.        , -0.5      ,  0.        ,
#         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
#         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
#         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
#         0.        ,  0.        ,  0.        ,  0.        , -0.6       ,
#         1.        , -0.5    ,  0.        ,  -0.4790641045716651, -1.3881486978589226, 0.3399735144695531, -1.7885660511600359, -1.1509037410660294, 0.2130497724658741, -0.2773730378742899,
#         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
#         0.        ,  0.        ,  0.        ,  0.        ,  0.        ])

T_drawer = np.array([[ 0.1730786 , -0.61077804,  0.77265386,  0.26134597],
       [ 0.96029804, -0.06962321, -0.27014862, -0.43723263],
       [ 0.21879549,  0.78873493,  0.57447867,  0.84468276],
       [ 0.        ,  0.        ,  0.        ,  1.        ]])

T_cabinet = np.array([[ 0.1160843 , -0.93993201,  0.32101752,  0.20997667],
       [ 0.90630871, -0.03199142, -0.42140369, -0.34221359],
       [ 0.40636062,  0.33985933,  0.84815487,  0.76815192],
       [ 0.        ,  0.        ,  0.        ,  1.        ]])


#### Simulating Table

# joint_angles = np.arange(0, np.pi/2, np.pi/200)*(-1)
# joint_angles = np.concatenate([joint_angles, np.arange(-np.pi/2, 0, np.pi/200)])

# prism_dists = np.arange(0, 0.6, 0.006)
# prism_dists = np.concatenate([prism_dists, prism_dists[::-1]])


# for q in joint_angles:
#     p.resetJointState(shelf_id, 2, q)
#     time.sleep(0.01)

# for q in joint_angles:
#     p.resetJointState(shelf_id, 3, q)
#     time.sleep(0.01)
    
# for q in prism_dists:
#     p.resetJointState(shelf_id, 4, q)
#     time.sleep(0.01)
# for q in prism_dists:
#     p.resetJointState(shelf_id, 5, q)
#     time.sleep(0.01)
# for q in prism_dists:
#     p.resetJointState(shelf_id, 6, q)
#     time.sleep(0.01)
# for q in prism_dists:
#     p.resetJointState(shelf_id, 7, q)
#     time.sleep(0.01)
    
    
# for q in joint_angles:
#     p.resetJointState(shelf_id, 0, q)
#     time.sleep(0.01)
    
# for q in joint_angles:
#     p.resetJointState(shelf_id, 1, -q)
#     time.sleep(0.01)


#Config of walker hand holding a bottle on the table
# from:
# angle = np.pi/2
# T_table = np.array([[np.cos(angle), -np.sin(angle), 0, 0.5],
#                     [np.sin(angle), np.cos(angle), 0, -0.4],
#                    [0,0,1,.95],
#                    [0,0,0,1]
#                    ])

# R_world_y = transforms3d.euler.euler2mat(-0, -np.pi/2,0)
# T_world_x = np.eye(4)
# T_world_x[:3,:3] = R_world_y

# T_table_rot = np.eye(4)
# T_table_rot = T_table.dot(T_world_x)


T_desired = np.array([[ 0.  , -1.  , -0.  ,  0.5 ],
       [ 0.  ,  0.  , -1.  , -0.4 ],
       [ 1.  ,  0.  ,  0.  ,  0.95],
       [ 0.  ,  0.  ,  0.  ,  1.  ]])